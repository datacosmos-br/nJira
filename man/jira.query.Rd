% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/njira.r
\name{jira.query}
\alias{jira.query}
\title{Jira Query Interface}
\usage{
jira.query(table, fields = NULL, where = NULL, groupby = NULL)
}
\arguments{
\item{table}{Name of Jira Tables from which data is fetched.}

\item{fields}{Comma separated names of the fields from the specified table whose values are fetched.}

\item{where}{specifies the where clause of the query. You can pass your JIRA JQL as is in the where clause.}

\item{groupby}{specifies the list of fields on which the data is grouped.}
}
\value{
The function returns the Jira query result as a dataframe.
}
\description{
The function returns the query data from Jira as a dataframe.
}
\details{
For querying the JIRA 'history' table, the where clause must specify the issue 'id' \cr
Example : \code{where = "id = 'HIVE-22692'"}
}
\examples{
issues <- jira.query(table = "issues", fields = "id AS IssueId, Created, Status, Priority", 
where = "project = 'HIVE' AND created >= '2019-01-01' AND created <= '2019-12-31' AND 
Status IN ('Open', 'Closed', 'Resolved')")

issues <- jira.query(table = "issues", fields = "id AS IssueId, Created", 
where = "'cf[10021]' = 'ABCD' AND Created > '2019-01-01'")

history <- jira.query(table = "history", where = "id = 'HIVE-22692'")

history <- jira.query(table = "history", fields = "id AS IssueId, toString AS Status, 
COUNT(fromString) AS Count", where = "id = 'HIVE-22692' AND field = 'status'", 
groupby = "id,toString")
}
